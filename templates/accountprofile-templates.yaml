apiVersion: v1
kind: Template
metadata:
  name: accountprofile
  annotations:
    openshift.io/display-name: Payment Gateway Account Profile Service
    description: Account Profile service for Payment Gateway.
    tags: payment gateway, accountprofile
    iconClass: icon-rh-openjdk
    openshift.io/long-description: This template deploy ${APPLICATION_NAME} application for OpenShift platform.
    openshift.io/provider-display-name: Gan CK
    openshift.io/documentation-url: https://github.com/chengkuangan/pgwdemo
    openshift.io/support-url: https://github.com/chengkuangan/pgwdemo
    template.openshift.io/bindable: "false"
message: "The following service(s) have been created in your project: ${APPLICATION_NAME}.\n\nFor more information about using this template, see https://github.com/chengkuangan/pgwdemo/README.md"
labels:
  template: ${APPLICATION_NAME}
  #app: ${APPLICATION_NAME}
  app-group: ${APPLICATION_NAME}
objects:
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${APPLICATION_NAME}-mongodb
    name: ${APPLICATION_NAME}-mongodb
  spec:
    ports:
    - name: tcp
      port: 27017
      protocol: TCP
      targetPort: 27017
    selector:
      app: ${APPLICATION_NAME}-mongodb
    sessionAffinity: None
    type: ClusterIP
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: ${APPLICATION_NAME}-mongodb
      version: ${APP_VERSION}
    name: ${APPLICATION_NAME}-mongodb
  spec:
    replicas: 1
    strategy:
      type: Recreate
    selector:
      matchLabels:
        app: ${APPLICATION_NAME}-mongodb
      name: ${APPLICATION_NAME}-mongodb
    template:
      metadata:
        labels:
          app: ${APPLICATION_NAME}-mongodb
          version: ${APP_VERSION}
          pgw-istio: 'true'
        annotations:
          sidecar.istio.io/inject: "true"
      spec:
        containers:
        - env:
          - name: MONGODB_USER
            valueFrom:
              secretKeyRef:
                key: mongodb.user
                name: ${APPLICATION_NAME}
#            value: ${MONGODB_USER}
          - name: MONGODB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: mongodb.password
                name: ${APPLICATION_NAME}
#            value: ${MONGODB_PASSWORD}
          - name: MONGODB_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                key: mongodb.admin.password
                name: ${APPLICATION_NAME}
#            value: ${MONGODB_ADMIN_PASSWORD}
          - name: MONGODB_DATABASE
            valueFrom:
              configMapKeyRef:
                key: mongodb.database
                name: ${APPLICATION_NAME}
#            value: ${MONGODB_DATABASE}
          image: rhscl/mongodb-32-rhel7
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 27017
            timeoutSeconds: 300
          name: ${APPLICATION_NAME}-mongodb
          ports:
          - containerPort: 27017
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD
                --eval="quit()"
            failureThreshold: 3
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 90
          resources:
            limits:
              memory: 512Mi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/mongodb/data
            name: ${APPLICATION_NAME}-mongodb-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: ${APPLICATION_NAME}-mongodb-data
          persistentVolumeClaim:
            claimName: ${APPLICATION_NAME}-mongodb
    test: false
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      app: ${APPLICATION_NAME}-mongodb
    name: ${APPLICATION_NAME}-mongodb
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${MONGODB_VOLUME_CAPACITY}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    ports:
    - port: 8080
      protocol: TCP
      targetPort: 8080
      name: http
    selector:
      app: ${APPLICATION_NAME}
    sessionAffinity: None
    type: ClusterIP
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: ${APPLICATION_NAME}
      version: ${APP_VERSION}
    name: ${APPLICATION_NAME}
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: ${APPLICATION_NAME}
    template:
      metadata:
        labels:
          app: ${APPLICATION_NAME}
          version: ${APP_VERSION}
        annotations:
          sidecar.istio.io/inject: "true"
      spec:
        containers:
        - env:
          - name: SPRING_DATA_MONGODB_HOST
            valueFrom:
              configMapKeyRef:
                key: mongodb.server.host
                name: ${APPLICATION_NAME}
          - name: SPRING_DATA_MONGODB_PORT
            valueFrom:
              configMapKeyRef:
                key: mongodb.server.port
                name: ${APPLICATION_NAME}
          - name: SPRING_DATA_MONGODB_USERNAME
            valueFrom:
              secretKeyRef:
                key: mongodb.user
                name: ${APPLICATION_NAME}
          - name: SPRING_DATA_MONGODB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: mongodb.password
                name: ${APPLICATION_NAME}
          - name: SPRING_DATA_MONGODB_DATABASE
            valueFrom:
              configMapKeyRef:
                key: mongodb.database
                name: ${APPLICATION_NAME}
          - name: SERVER_PORT
            value: "8080"
          ports:
            - containerPort: 8080
          #image: ${APPLICATION_NAME}:latest  
          image: image-registry.openshift-image-registry.svc:5000/${APP_NAMESPACE}/${APPLICATION_NAME}:latest
          imagePullPolicy: IfNotPresent
          name: ${APPLICATION_NAME}
          resources: {}
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  data:
    mongodb.database: ${MONGODB_DATABASE}
#    mongodb.password: ${MONGODB_PASSWORD}
    mongodb.server.host: ${APPLICATION_NAME}-mongodb
    mongodb.server.port: "27017"
#    mongodb.user: ${MONGODB_USER}
- apiVersion: v1
  kind: Secret
  metadata:
    name: accountprofile
    labels:
      app: accountprofile
      app-group: accountprofile
      version: v1
      template: accountprofile
  data:
    mongodb.password: ${MONGODB_PASSWORD}
    mongodb.user: ${MONGODB_USER}
    mongodb.admin.password: ${MONGODB_ADMIN_PASSWORD}
# Commented out for internal service.
#- apiVersion: v1
#  kind: Route
#  metadata:
#    labels:
#      app: ${APPLICATION_NAME}
#    name: ${APPLICATION_NAME}
#  spec:
#    port:
#      targetPort: 8080
#    to:
#      kind: Service
#      name: ${APPLICATION_NAME}
#      weight: 100
#
# Not required with Deployment type.
#- apiVersion: v1
#  kind: BuildConfig
#  metadata:
#    labels:
#      app: ${APPLICATION_NAME}
#    name: ${APPLICATION_NAME}
#  spec:
#    output:
#      to:
#        kind: ImageStreamTag
#        name: ${APPLICATION_NAME}:latest
#    runPolicy: Serial
#    source:
#      type: Binary
#    strategy:
#      sourceStrategy:
#        from:
#          kind: ImageStreamTag
#          name: redhat-openjdk18-openshift:1.2
#          namespace: openshift
#      type: Source
#- kind: ImageStream
#  apiVersion: v1
#  metadata:
#    labels:
#      app: ${APPLICATION_NAME}
#    name: ${APPLICATION_NAME}
#  spec:
#    output:
#      to:
#        kind: ImageStreamTag
#        name: "${APPLICATION_NAME}"  
parameters:
- description: Application Name
  displayName: Application Name
  name: APPLICATION_NAME
  value: accountprofile
  required: true
- description: Database Name
  displayName: Database Name
  name: MONGODB_DATABASE
  value: accountprofile
  required: true
- description: Database User
  displayName: Database User
  name: MONGODB_USER
  # value: accountprofile
  value: YWNjb3VudHByb2ZpbGU=
  required: true
- description: Database Password
  displayName: Database Password
  name: MONGODB_PASSWORD
#  value: accountprofile
  value: YWNjb3VudHByb2ZpbGU=
  required: true
- description: Database Admin Password
  displayName: Database Admin Password
  name: MONGODB_ADMIN_PASSWORD
#  value: accountprofile
  value: YWNjb3VudHByb2ZpbGU=
  required: true
- description: Mongodb Version
  displayName: Mongodb Version
  name: MONGODB_VERSION
  value: "latest"
  required: true
- description: Mongodb Volume Capacity
  displayName: Mongodb Volume Capacity
  name: MONGODB_VOLUME_CAPACITY
  value: 1Gi
  required: true
- name: APP_NAMESPACE
  displayName: Application namespace
  description: Application namespace
  value: paygate
  required: true
- name: APP_VERSION
  displayName: Application version
  description: Application version label
  value: v1
  required": true
#- description: Git URL to the source code
#  displayName: Git URL
#  name: SOURCE_REPOSITORY_URL
#  value: https://github.com/chengkuangan/accountbalance.git
#  required: true 
- description: Maven Repo URL
  displayName: Maven Repo URL
  name: MAVEN_MIRROR_URL
  required: false
#- description: The default port the service listen at
#  displayName: Service Port
#  name: SERVER_PORT
#  value: "8080"
#  required: true  